// This Source Code Form is subject to the terms of the Mozilla Public
// License, version 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// Code generated by gowsdl-v0.5.1-0.20211204020131-e40ac4d41b6c, minor edits and fixes

package scpclient

import (
	"context"
	"encoding/xml"
	"time"

	"github.com/hooklift/gowsdl/soap"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type GetPanelSettings struct {
	XMLName xml.Name `xml:"tns:getPanelSettings"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type GetPanelSettingsResponse struct {
	XMLName xml.Name `xml:"getPanelSettingsResponse"`

	Return_ *PanelSettings `xml:"return,omitempty" json:"return,omitempty"`
}

type PanelSettings struct {
	XMLName xml.Name `xml:"tns:panelSettings"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	Language string `xml:"language,omitempty" json:"language,omitempty"`

	PasswordlessMode bool `xml:"passwordlessMode,omitempty" json:"passwordlessMode,omitempty"`

	SecureAccessMode bool `xml:"secureAccessMode,omitempty" json:"secureAccessMode,omitempty"`

	ShowNickname bool `xml:"showNickname,omitempty" json:"showNickname,omitempty"`

	WebserviceEnabled bool `xml:"webserviceEnabled,omitempty" json:"webserviceEnabled,omitempty"`
}

type GetVServerIPs struct {
	XMLName xml.Name `xml:"tns:getVServerIPs"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type GetVServerIPsResponse struct {
	XMLName xml.Name `xml:"getVServerIPsResponse"`

	Return_ []*string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServerUpdateNotification struct {
	XMLName xml.Name `xml:"tns:getVServerUpdateNotification"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type GetVServerUpdateNotificationResponse struct {
	XMLName xml.Name `xml:"getVServerUpdateNotificationResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type ChangeUserPassword struct {
	XMLName xml.Name `xml:"tns:changeUserPassword"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	OldPassword string `xml:"oldPassword,omitempty" json:"oldPassword,omitempty"`

	NewPassword string `xml:"newPassword,omitempty" json:"newPassword,omitempty"`
}

type ChangeUserPasswordResponse struct {
	XMLName xml.Name `xml:"changeUserPasswordResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type VServerReset struct {
	XMLName xml.Name `xml:"tns:vServerReset"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerResetResponse struct {
	XMLName xml.Name `xml:"vServerResetResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type VServerResume struct {
	XMLName xml.Name `xml:"tns:vServerResume"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerResumeResponse struct {
	XMLName xml.Name `xml:"vServerResumeResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type VServerStart struct {
	XMLName xml.Name `xml:"tns:vServerStart"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerStartResponse struct {
	XMLName xml.Name `xml:"vServerStartResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type SendPasswordResetRequest struct {
	XMLName xml.Name `xml:"tns:sendPasswordResetRequest"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	EMail string `xml:"eMail,omitempty" json:"eMail,omitempty"`
}

type SendPasswordResetRequestResponse struct {
	XMLName xml.Name `xml:"sendPasswordResetRequestResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type VServerSuspend struct {
	XMLName xml.Name `xml:"tns:vServerSuspend"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerSuspendResponse struct {
	XMLName xml.Name `xml:"vServerSuspendResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type GetUserData struct {
	XMLName xml.Name `xml:"tns:getUserData"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type GetUserDataResponse struct {
	XMLName xml.Name `xml:"getUserDataResponse"`

	Return_ *UserDataObject `xml:"return,omitempty" json:"return,omitempty"`
}

type UserDataObject struct {
	XMLName xml.Name `xml:"userDataObject"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	Company string `xml:"company,omitempty" json:"company,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	Firstname string `xml:"firstname,omitempty" json:"firstname,omitempty"`

	Lastname string `xml:"lastname,omitempty" json:"lastname,omitempty"`

	Loginname string `xml:"loginname,omitempty" json:"loginname,omitempty"`

	Postcode string `xml:"postcode,omitempty" json:"postcode,omitempty"`

	Street string `xml:"street,omitempty" json:"street,omitempty"`
}

type GetVServerInformation struct {
	XMLName xml.Name `xml:"tns:getVServerInformation"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Vservername string `xml:"vservername,omitempty" json:"vservername,omitempty"`

	Language string `xml:"language,omitempty" json:"language,omitempty"`
}

type GetVServerInformationResponse struct {
	XMLName xml.Name `xml:"getVServerInformationResponse"`

	Return_ *VServerInformationObject `xml:"return,omitempty" json:"return,omitempty"`
}

type VServerInformationObject struct {
	XMLName xml.Name `xml:"return"`

	CpuCores int32 `xml:"cpuCores,omitempty" json:"cpuCores,omitempty"`

	CurrentMonth *TrafficMonthObject `xml:"currentMonth,omitempty" json:"currentMonth,omitempty"`

	Ips []*string `xml:"ips,omitempty" json:"ips,omitempty"`

	Memory int64 `xml:"memory,omitempty" json:"memory,omitempty"`

	RebootRecommended bool `xml:"rebootRecommended,omitempty" json:"rebootRecommended,omitempty"`

	RebootRecommendedMessage string `xml:"rebootRecommendedMessage,omitempty" json:"rebootRecommendedMessage,omitempty"`

	RescueEnabled bool `xml:"rescueEnabled,omitempty" json:"rescueEnabled,omitempty"`

	RescueEnabledMessage string `xml:"rescueEnabledMessage,omitempty" json:"rescueEnabledMessage,omitempty"`

	ServerDisks []*ServerDisk `xml:"serverDisk,omitempty" json:"serverDisks,omitempty"`

	ServerInterfaces []*ServerInterface `xml:"serverInterface,omitempty" json:"serverInterfaces,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Uptime string `xml:"uptime,omitempty" json:"uptime,omitempty"`

	VServerName string `xml:"vServerName,omitempty" json:"vServerName,omitempty"`

	VServerNickname string `xml:"vServerNickname,omitempty" json:"vServerNickname,omitempty"`
}

type TrafficMonthObject struct {
	XMLName xml.Name `xml:"currentMonth"`

	In int64 `xml:"in,omitempty" json:"in,omitempty"`

	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	Out int64 `xml:"out,omitempty" json:"out,omitempty"`

	Total int64 `xml:"total,omitempty" json:"total,omitempty"`

	Year int32 `xml:"year,omitempty" json:"year,omitempty"`
}

type ServerDisk struct {
	XMLName xml.Name `xml:"serverDisk"`

	Capacity int64 `xml:"capacity,omitempty" json:"capacity,omitempty"`

	Driver string `xml:"driver,omitempty" json:"driver,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	OptimizationRecommended bool `xml:"optimizationRecommended,omitempty" json:"optimizationRecommended,omitempty"`

	OptimizationRecommendedMessage string `xml:"optimizationRecommendedMessage,omitempty" json:"optimizationRecommendedMessage,omitempty"`

	Used int64 `xml:"used,omitempty" json:"used,omitempty"`
}

type ServerInterface struct {
	XMLName xml.Name `xml:"serverInterface"`

	Driver string `xml:"driver,omitempty" json:"driver,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Ipv4IP []*string `xml:"ipv4IP,omitempty" json:"ipv4IP,omitempty"`

	Ipv6IP []*string `xml:"ipv6IP,omitempty" json:"ipv6IP,omitempty"`

	Mac string `xml:"mac,omitempty" json:"mac,omitempty"`

	TrafficThrottled bool `xml:"trafficThrottled,omitempty" json:"trafficThrottled,omitempty"`

	TrafficThrottledMessage string `xml:"trafficThrottledMessage,omitempty" json:"trafficThrottledMessage,omitempty"`
}

type VServerPoweroff struct {
	XMLName xml.Name `xml:"tns:vServerPoweroff"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerPoweroffResponse struct {
	XMLName xml.Name `xml:"vServerPoweroffResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type GetLoginToken struct {
	XMLName xml.Name `xml:"tns:getLoginToken"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type GetLoginTokenResponse struct {
	XMLName xml.Name `xml:"getLoginTokenResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServerStatToken struct {
	XMLName xml.Name `xml:"tns:getVServerStatToken"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type GetVServerStatTokenResponse struct {
	XMLName xml.Name `xml:"getVServerStatTokenResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServerState struct {
	XMLName xml.Name `xml:"tns:getVServerState"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type GetVServerStateResponse struct {
	XMLName xml.Name `xml:"getVServerStateResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type ChangeIPRouting struct {
	XMLName xml.Name `xml:"tns:changeIPRouting"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	RoutedIP string `xml:"routedIP,omitempty" json:"routedIP,omitempty"`

	RoutedMask string `xml:"routedMask,omitempty" json:"routedMask,omitempty"`

	DestinationVserverName string `xml:"destinationVserverName,omitempty" json:"destinationVserverName,omitempty"`

	DestinationInterfaceMAC string `xml:"destinationInterfaceMAC,omitempty" json:"destinationInterfaceMAC,omitempty"`
}

type ChangeIPRoutingResponse struct {
	XMLName xml.Name `xml:"changeIPRoutingResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServerLogEntryCount struct {
	XMLName xml.Name `xml:"tns:getVServerLogEntryCount"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Vservername string `xml:"vservername,omitempty" json:"vservername,omitempty"`
}

type GetVServerLogEntryCountResponse struct {
	XMLName xml.Name `xml:"getVServerLogEntryCountResponse"`

	Return_ int64 `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServerUptime struct {
	XMLName xml.Name `xml:"tns:getVServerUptime"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type GetVServerUptimeResponse struct {
	XMLName xml.Name `xml:"getVServerUptimeResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServerTrafficOfMonth struct {
	XMLName xml.Name `xml:"tns:getVServerTrafficOfMonth"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`

	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	Month int32 `xml:"month,omitempty" json:"month,omitempty"`
}

type GetVServerTrafficOfMonthResponse struct {
	XMLName xml.Name `xml:"getVServerTrafficOfMonthResponse"`

	Return_ *TrafficMonthObject `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServerLogEntries struct {
	XMLName xml.Name `xml:"tns:getVServerLogEntries"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Vservername string `xml:"vservername,omitempty" json:"vservername,omitempty"`

	Start int32 `xml:"start,omitempty" json:"start,omitempty"`

	Results int32 `xml:"results,omitempty" json:"results,omitempty"`

	Language string `xml:"language,omitempty" json:"language,omitempty"`
}

type GetVServerLogEntriesResponse struct {
	XMLName xml.Name `xml:"getVServerLogEntriesResponse"`


	Return_ []*LogEntry `xml:"return,omitempty" json:"return,omitempty"`
}

type LogEntry struct {
	XMLName xml.Name `xml:"logEntry"`

	AdditionalInfo string `xml:"additionalInfo,omitempty" json:"additionalInfo,omitempty"`

	Date soap.XSDDateTime `xml:"date,omitempty" json:"date,omitempty"`

	Message string `xml:"message,omitempty" json:"message,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`
}

type VServerACPIReboot struct {
	XMLName xml.Name `xml:"tns:vServerACPIReboot"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerACPIRebootResponse struct {
	XMLName xml.Name `xml:"vServerACPIRebootResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type StopVServer struct {
	XMLName xml.Name `xml:"tns:stopVServer"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type StopVServerResponse struct {
	XMLName xml.Name `xml:"stopVServerResponse"`

	Return_ *WebServiceSimpleResult `xml:"return,omitempty" json:"return,omitempty"`
}

type WebServiceSimpleResult struct {
	XMLName xml.Name `xml:"webServiceSimpleResult"`


	Message string `xml:"message,omitempty" json:"message,omitempty"`

	Success bool `xml:"success,omitempty" json:"success,omitempty"`
}

type GetVServerTrafficOfDay struct {
	XMLName xml.Name `xml:"tns:getVServerTrafficOfDay"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`

	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type GetVServerTrafficOfDayResponse struct {
	XMLName xml.Name `xml:"tns:getVServerTrafficOfDayResponse"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	Return_ *TrafficDayObject `xml:"return,omitempty" json:"return,omitempty"`
}

type TrafficDayObject struct {
	XMLName xml.Name `xml:"tns:trafficDayObject"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	*TrafficMonthObject

	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type GetVServerNickname struct {
	XMLName xml.Name `xml:"tns:getVServerNickname"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Vservername string `xml:"vservername,omitempty" json:"vservername,omitempty"`
}

type GetVServerNicknameResponse struct {
	XMLName xml.Name `xml:"tns:getVServerNicknameResponse"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type SetVServerNickname struct {
	XMLName xml.Name `xml:"tns:setVServerNickname"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Vservername string `xml:"vservername,omitempty" json:"vservername,omitempty"`

	Vservernickname string `xml:"vservernickname,omitempty" json:"vservernickname,omitempty"`
}

type SetVServerNicknameResponse struct {
	XMLName xml.Name `xml:"tns:setVServerNicknameResponse"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type VServerACPIShutdown struct {
	XMLName xml.Name `xml:"tns:vServerACPIShutdown"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerACPIShutdownResponse struct {
	XMLName xml.Name `xml:"vServerACPIShutdownResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type GetVServers struct {
	XMLName xml.Name `xml:"tns:getVServers"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type GetVServersResponse struct {
	XMLName xml.Name `xml:"getVServersResponse"`

	Return_ []*string `xml:"return,omitempty" json:"return,omitempty"`
}

type VServerRestore struct {
	XMLName xml.Name `xml:"tns:vServerRestore"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type VServerRestoreResponse struct {
	XMLName xml.Name `xml:"vServerRestoreResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type AddCloudVLANInterface struct {
	XMLName xml.Name `xml:"tns:addCloudVLANInterface"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Vservername string `xml:"vservername,omitempty" json:"vservername,omitempty"`

	Cloudvlanid int32 `xml:"cloudvlanid,omitempty" json:"cloudvlanid,omitempty"`

	Driver string `xml:"driver,omitempty" json:"driver,omitempty"`
}

type AddCloudVLANInterfaceResponse struct {
	XMLName xml.Name `xml:"addCloudVLANInterfaceResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type StartVServer struct {
	XMLName xml.Name `xml:"tns:startVServer"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	VserverName string `xml:"vserverName,omitempty" json:"vserverName,omitempty"`
}

type StartVServerResponse struct {
	XMLName xml.Name `xml:"startVServerResponse"`

	Return_ *WebServiceSimpleResult `xml:"return,omitempty" json:"return,omitempty"`
}

type SetPanelSettings struct {
	XMLName xml.Name `xml:"tns:setPanelSettings"`

	Xmlns string `xml:"xmlns:tns,attr" json:"-"`

	LoginName string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	ShowNickname bool `xml:"showNickname,omitempty" json:"showNickname,omitempty"`
}

type SetPanelSettingsResponse struct {
	XMLName xml.Name `xml:"setPanelSettingsResponse"`

	Return_ bool `xml:"return,omitempty" json:"return,omitempty"`
}

type WSEndUser interface {
	StopVServer(request *StopVServer) (*StopVServerResponse, error)

	StopVServerContext(ctx context.Context, request *StopVServer) (*StopVServerResponse, error)

	StartVServer(request *StartVServer) (*StartVServerResponse, error)

	StartVServerContext(ctx context.Context, request *StartVServer) (*StartVServerResponse, error)

	GetVServerIPs(request *GetVServerIPs) (*GetVServerIPsResponse, error)

	GetVServerIPsContext(ctx context.Context, request *GetVServerIPs) (*GetVServerIPsResponse, error)

	GetVServerInformation(request *GetVServerInformation) (*GetVServerInformationResponse, error)

	GetVServerInformationContext(ctx context.Context, request *GetVServerInformation) (*GetVServerInformationResponse, error)

	ChangeUserPassword(request *ChangeUserPassword) (*ChangeUserPasswordResponse, error)

	ChangeUserPasswordContext(ctx context.Context, request *ChangeUserPassword) (*ChangeUserPasswordResponse, error)

	SendPasswordResetRequest(request *SendPasswordResetRequest) (*SendPasswordResetRequestResponse, error)

	SendPasswordResetRequestContext(ctx context.Context, request *SendPasswordResetRequest) (*SendPasswordResetRequestResponse, error)

	GetVServerLogEntryCount(request *GetVServerLogEntryCount) (*GetVServerLogEntryCountResponse, error)

	GetVServerLogEntryCountContext(ctx context.Context, request *GetVServerLogEntryCount) (*GetVServerLogEntryCountResponse, error)

	GetVServerLogEntries(request *GetVServerLogEntries) (*GetVServerLogEntriesResponse, error)

	GetVServerLogEntriesContext(ctx context.Context, request *GetVServerLogEntries) (*GetVServerLogEntriesResponse, error)

	GetVServerNickname(request *GetVServerNickname) (*GetVServerNicknameResponse, error)

	GetVServerNicknameContext(ctx context.Context, request *GetVServerNickname) (*GetVServerNicknameResponse, error)

	SetVServerNickname(request *SetVServerNickname) (*SetVServerNicknameResponse, error)

	SetVServerNicknameContext(ctx context.Context, request *SetVServerNickname) (*SetVServerNicknameResponse, error)

	GetVServerState(request *GetVServerState) (*GetVServerStateResponse, error)

	GetVServerStateContext(ctx context.Context, request *GetVServerState) (*GetVServerStateResponse, error)

	GetVServerUptime(request *GetVServerUptime) (*GetVServerUptimeResponse, error)

	GetVServerUptimeContext(ctx context.Context, request *GetVServerUptime) (*GetVServerUptimeResponse, error)

	GetVServerUpdateNotification(request *GetVServerUpdateNotification) (*GetVServerUpdateNotificationResponse, error)

	GetVServerUpdateNotificationContext(ctx context.Context, request *GetVServerUpdateNotification) (*GetVServerUpdateNotificationResponse, error)

	VServerStart(request *VServerStart) (*VServerStartResponse, error)

	VServerStartContext(ctx context.Context, request *VServerStart) (*VServerStartResponse, error)

	VServerSuspend(request *VServerSuspend) (*VServerSuspendResponse, error)

	VServerSuspendContext(ctx context.Context, request *VServerSuspend) (*VServerSuspendResponse, error)

	VServerResume(request *VServerResume) (*VServerResumeResponse, error)

	VServerResumeContext(ctx context.Context, request *VServerResume) (*VServerResumeResponse, error)

	VServerRestore(request *VServerRestore) (*VServerRestoreResponse, error)

	VServerRestoreContext(ctx context.Context, request *VServerRestore) (*VServerRestoreResponse, error)

	GetVServerStatToken(request *GetVServerStatToken) (*GetVServerStatTokenResponse, error)

	GetVServerStatTokenContext(ctx context.Context, request *GetVServerStatToken) (*GetVServerStatTokenResponse, error)

	GetVServerTrafficOfDay(request *GetVServerTrafficOfDay) (*GetVServerTrafficOfDayResponse, error)

	GetVServerTrafficOfDayContext(ctx context.Context, request *GetVServerTrafficOfDay) (*GetVServerTrafficOfDayResponse, error)

	GetVServerTrafficOfMonth(request *GetVServerTrafficOfMonth) (*GetVServerTrafficOfMonthResponse, error)

	GetVServerTrafficOfMonthContext(ctx context.Context, request *GetVServerTrafficOfMonth) (*GetVServerTrafficOfMonthResponse, error)

	VServerACPIShutdown(request *VServerACPIShutdown) (*VServerACPIShutdownResponse, error)

	VServerACPIShutdownContext(ctx context.Context, request *VServerACPIShutdown) (*VServerACPIShutdownResponse, error)

	VServerACPIReboot(request *VServerACPIReboot) (*VServerACPIRebootResponse, error)

	VServerACPIRebootContext(ctx context.Context, request *VServerACPIReboot) (*VServerACPIRebootResponse, error)

	VServerReset(request *VServerReset) (*VServerResetResponse, error)

	VServerResetContext(ctx context.Context, request *VServerReset) (*VServerResetResponse, error)

	VServerPoweroff(request *VServerPoweroff) (*VServerPoweroffResponse, error)

	VServerPoweroffContext(ctx context.Context, request *VServerPoweroff) (*VServerPoweroffResponse, error)

	AddCloudVLANInterface(request *AddCloudVLANInterface) (*AddCloudVLANInterfaceResponse, error)

	AddCloudVLANInterfaceContext(ctx context.Context, request *AddCloudVLANInterface) (*AddCloudVLANInterfaceResponse, error)

	ChangeIPRouting(request *ChangeIPRouting) (*ChangeIPRoutingResponse, error)

	ChangeIPRoutingContext(ctx context.Context, request *ChangeIPRouting) (*ChangeIPRoutingResponse, error)

	GetVServers(request *GetVServers) (*GetVServersResponse, error)

	GetVServersContext(ctx context.Context, request *GetVServers) (*GetVServersResponse, error)

	GetLoginToken(request *GetLoginToken) (*GetLoginTokenResponse, error)

	GetLoginTokenContext(ctx context.Context, request *GetLoginToken) (*GetLoginTokenResponse, error)

	SetPanelSettings(request *SetPanelSettings) (*SetPanelSettingsResponse, error)

	SetPanelSettingsContext(ctx context.Context, request *SetPanelSettings) (*SetPanelSettingsResponse, error)

	GetPanelSettings(request *GetPanelSettings) (*GetPanelSettingsResponse, error)

	GetPanelSettingsContext(ctx context.Context, request *GetPanelSettings) (*GetPanelSettingsResponse, error)

	GetUserData(request *GetUserData) (*GetUserDataResponse, error)

	GetUserDataContext(ctx context.Context, request *GetUserData) (*GetUserDataResponse, error)
}

type wSEndUser struct {
	client *soap.Client
}

func NewWSEndUser(client *soap.Client) WSEndUser {
	return &wSEndUser{
		client: client,
	}
}

func (service *wSEndUser) StopVServerContext(ctx context.Context, request *StopVServer) (*StopVServerResponse, error) {
	response := new(StopVServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) StopVServer(request *StopVServer) (*StopVServerResponse, error) {
	return service.StopVServerContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) StartVServerContext(ctx context.Context, request *StartVServer) (*StartVServerResponse, error) {
	response := new(StartVServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) StartVServer(request *StartVServer) (*StartVServerResponse, error) {
	return service.StartVServerContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerIPsContext(ctx context.Context, request *GetVServerIPs) (*GetVServerIPsResponse, error) {
	response := new(GetVServerIPsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerIPs(request *GetVServerIPs) (*GetVServerIPsResponse, error) {
	return service.GetVServerIPsContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerInformationContext(ctx context.Context, request *GetVServerInformation) (*GetVServerInformationResponse, error) {
	response := new(GetVServerInformationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerInformation(request *GetVServerInformation) (*GetVServerInformationResponse, error) {
	return service.GetVServerInformationContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) ChangeUserPasswordContext(ctx context.Context, request *ChangeUserPassword) (*ChangeUserPasswordResponse, error) {
	response := new(ChangeUserPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) ChangeUserPassword(request *ChangeUserPassword) (*ChangeUserPasswordResponse, error) {
	return service.ChangeUserPasswordContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) SendPasswordResetRequestContext(ctx context.Context, request *SendPasswordResetRequest) (*SendPasswordResetRequestResponse, error) {
	response := new(SendPasswordResetRequestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) SendPasswordResetRequest(request *SendPasswordResetRequest) (*SendPasswordResetRequestResponse, error) {
	return service.SendPasswordResetRequestContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerLogEntryCountContext(ctx context.Context, request *GetVServerLogEntryCount) (*GetVServerLogEntryCountResponse, error) {
	response := new(GetVServerLogEntryCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerLogEntryCount(request *GetVServerLogEntryCount) (*GetVServerLogEntryCountResponse, error) {
	return service.GetVServerLogEntryCountContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerLogEntriesContext(ctx context.Context, request *GetVServerLogEntries) (*GetVServerLogEntriesResponse, error) {
	response := new(GetVServerLogEntriesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerLogEntries(request *GetVServerLogEntries) (*GetVServerLogEntriesResponse, error) {
	return service.GetVServerLogEntriesContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerNicknameContext(ctx context.Context, request *GetVServerNickname) (*GetVServerNicknameResponse, error) {
	response := new(GetVServerNicknameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerNickname(request *GetVServerNickname) (*GetVServerNicknameResponse, error) {
	return service.GetVServerNicknameContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) SetVServerNicknameContext(ctx context.Context, request *SetVServerNickname) (*SetVServerNicknameResponse, error) {
	response := new(SetVServerNicknameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) SetVServerNickname(request *SetVServerNickname) (*SetVServerNicknameResponse, error) {
	return service.SetVServerNicknameContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerStateContext(ctx context.Context, request *GetVServerState) (*GetVServerStateResponse, error) {
	response := new(GetVServerStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerState(request *GetVServerState) (*GetVServerStateResponse, error) {
	return service.GetVServerStateContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerUptimeContext(ctx context.Context, request *GetVServerUptime) (*GetVServerUptimeResponse, error) {
	response := new(GetVServerUptimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerUptime(request *GetVServerUptime) (*GetVServerUptimeResponse, error) {
	return service.GetVServerUptimeContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerUpdateNotificationContext(ctx context.Context, request *GetVServerUpdateNotification) (*GetVServerUpdateNotificationResponse, error) {
	response := new(GetVServerUpdateNotificationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerUpdateNotification(request *GetVServerUpdateNotification) (*GetVServerUpdateNotificationResponse, error) {
	return service.GetVServerUpdateNotificationContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerStartContext(ctx context.Context, request *VServerStart) (*VServerStartResponse, error) {
	response := new(VServerStartResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerStart(request *VServerStart) (*VServerStartResponse, error) {
	return service.VServerStartContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerSuspendContext(ctx context.Context, request *VServerSuspend) (*VServerSuspendResponse, error) {
	response := new(VServerSuspendResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerSuspend(request *VServerSuspend) (*VServerSuspendResponse, error) {
	return service.VServerSuspendContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerResumeContext(ctx context.Context, request *VServerResume) (*VServerResumeResponse, error) {
	response := new(VServerResumeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerResume(request *VServerResume) (*VServerResumeResponse, error) {
	return service.VServerResumeContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerRestoreContext(ctx context.Context, request *VServerRestore) (*VServerRestoreResponse, error) {
	response := new(VServerRestoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerRestore(request *VServerRestore) (*VServerRestoreResponse, error) {
	return service.VServerRestoreContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerStatTokenContext(ctx context.Context, request *GetVServerStatToken) (*GetVServerStatTokenResponse, error) {
	response := new(GetVServerStatTokenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerStatToken(request *GetVServerStatToken) (*GetVServerStatTokenResponse, error) {
	return service.GetVServerStatTokenContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerTrafficOfDayContext(ctx context.Context, request *GetVServerTrafficOfDay) (*GetVServerTrafficOfDayResponse, error) {
	response := new(GetVServerTrafficOfDayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerTrafficOfDay(request *GetVServerTrafficOfDay) (*GetVServerTrafficOfDayResponse, error) {
	return service.GetVServerTrafficOfDayContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServerTrafficOfMonthContext(ctx context.Context, request *GetVServerTrafficOfMonth) (*GetVServerTrafficOfMonthResponse, error) {
	response := new(GetVServerTrafficOfMonthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServerTrafficOfMonth(request *GetVServerTrafficOfMonth) (*GetVServerTrafficOfMonthResponse, error) {
	return service.GetVServerTrafficOfMonthContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerACPIShutdownContext(ctx context.Context, request *VServerACPIShutdown) (*VServerACPIShutdownResponse, error) {
	response := new(VServerACPIShutdownResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerACPIShutdown(request *VServerACPIShutdown) (*VServerACPIShutdownResponse, error) {
	return service.VServerACPIShutdownContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerACPIRebootContext(ctx context.Context, request *VServerACPIReboot) (*VServerACPIRebootResponse, error) {
	response := new(VServerACPIRebootResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerACPIReboot(request *VServerACPIReboot) (*VServerACPIRebootResponse, error) {
	return service.VServerACPIRebootContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerResetContext(ctx context.Context, request *VServerReset) (*VServerResetResponse, error) {
	response := new(VServerResetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerReset(request *VServerReset) (*VServerResetResponse, error) {
	return service.VServerResetContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) VServerPoweroffContext(ctx context.Context, request *VServerPoweroff) (*VServerPoweroffResponse, error) {
	response := new(VServerPoweroffResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) VServerPoweroff(request *VServerPoweroff) (*VServerPoweroffResponse, error) {
	return service.VServerPoweroffContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) AddCloudVLANInterfaceContext(ctx context.Context, request *AddCloudVLANInterface) (*AddCloudVLANInterfaceResponse, error) {
	response := new(AddCloudVLANInterfaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) AddCloudVLANInterface(request *AddCloudVLANInterface) (*AddCloudVLANInterfaceResponse, error) {
	return service.AddCloudVLANInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) ChangeIPRoutingContext(ctx context.Context, request *ChangeIPRouting) (*ChangeIPRoutingResponse, error) {
	response := new(ChangeIPRoutingResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) ChangeIPRouting(request *ChangeIPRouting) (*ChangeIPRoutingResponse, error) {
	return service.ChangeIPRoutingContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetVServersContext(ctx context.Context, request *GetVServers) (*GetVServersResponse, error) {
	response := new(GetVServersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetVServers(request *GetVServers) (*GetVServersResponse, error) {
	return service.GetVServersContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetLoginTokenContext(ctx context.Context, request *GetLoginToken) (*GetLoginTokenResponse, error) {
	response := new(GetLoginTokenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetLoginToken(request *GetLoginToken) (*GetLoginTokenResponse, error) {
	return service.GetLoginTokenContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) SetPanelSettingsContext(ctx context.Context, request *SetPanelSettings) (*SetPanelSettingsResponse, error) {
	response := new(SetPanelSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) SetPanelSettings(request *SetPanelSettings) (*SetPanelSettingsResponse, error) {
	return service.SetPanelSettingsContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetPanelSettingsContext(ctx context.Context, request *GetPanelSettings) (*GetPanelSettingsResponse, error) {
	response := new(GetPanelSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetPanelSettings(request *GetPanelSettings) (*GetPanelSettingsResponse, error) {
	return service.GetPanelSettingsContext(
		context.Background(),
		request,
	)
}

func (service *wSEndUser) GetUserDataContext(ctx context.Context, request *GetUserData) (*GetUserDataResponse, error) {
	response := new(GetUserDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *wSEndUser) GetUserData(request *GetUserData) (*GetUserDataResponse, error) {
	return service.GetUserDataContext(
		context.Background(),
		request,
	)
}
